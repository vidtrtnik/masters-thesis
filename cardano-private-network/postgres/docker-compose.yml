version: "3.9"

services:

  postgres:
    container_name: postgres
    image: postgres:11.5-alpine
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    #ports:
    #  - 127.0.0.1:5432:5432
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    shm_size: '2gb'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      timeout: 3s
    restart: on-failure


  postgrest:
    container_name: postgrest
    image: postgrest/postgrest
    ports:
      - 127.0.0.1:3000:3000
    environment:
      PGRST_DB_URI: postgres://postgres:postgres@postgres:5432/postgres
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: postgres
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
    healthcheck:
      test: ["CMD", "/bin/postgrest", "-h"]
      start_period: 10s
    restart: on-failure


  swagger:
    container_name: swagger
    image: swaggerapi/swagger-ui
    ports:
      - 127.0.0.1:2020:8080
    expose:
      - "8080"
    environment:
      API_URL: http://localhost:3000/
    healthcheck:
      test: ["CMD-SHELL", "curl -f 127.0.0.1:8080 || exit 1"]
    restart: on-failure


secrets:
  postgres_db:
    file: ./postgres/placeholder-secrets/postgres_db
  postgres_password:
    file: ./postgres/placeholder-secrets/postgres_password
  postgres_user:
    file: ./postgres/placeholder-secrets/postgres_user


volumes:
  postgres-data:


networks:
  default:
    name: "cpn"
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    enable_ipv6: false
